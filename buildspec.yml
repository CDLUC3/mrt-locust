version: 0.2

phases:

  build:
    on-failure: ABORT
    commands:
    - |
      set +x
      pip -q install locust
      pip -q install bs4

      MS_LOGIN=8000
      MS_RESP=2000
      DURATION=2m

      if [[ "$LOCUST_TEST_ENV" == "production" ]]
      then
        MERRITTURL=https://merritt.cdlib.org
        SSMPATH=/uc3/mrt/dev/integ-tests/for-prod
        USERCOUNT=10
        ARKLIST=ark:/99999/fk4t16pn3j,ark:/99999/fk4xp8q22b
      else
        MERRITTURL=https://merritt-stage.cdlib.org
        SSMPATH=/uc3/mrt/dev/integ-tests/for-stage
        USERCOUNT=6
        ARKLIST=ark:/99999/fk4fv08g3k
      fi

      if [[ "$LOCUST_MODE" == "readonly" ]]
      then
        export MNEMONIC=merritt_demo_pub
        export TESTARKS=
      else
        export MERRITTUSER=$(aws ssm get-parameter --name ${SSMPATH}/user --query Parameter.Value --output text)
        export MERRITTPASS=$(aws ssm get-parameter --name ${SSMPATH}/password --with-decryption --query Parameter.Value --output text)
        export MNEMONIC=merritt_demo
        export TESTARKS=$ARKLIST
      fi

      header() {
        echo 
        echo "================"
        echo
        echo "$1"
        echo
      }

      fail() {
        echo 
        echo " ** $1"
        echo
        false
      }

    - |
      header("Run 2 minute locust test")
      locust --headless -u ${USERCOUNT} -t ${DURATION} -H $MERRITTURL --only-summary -L ERROR --csv out.csv --reset-stats --json > out.json
      cut -d, -f2,3,4,15 out.csv_stats.csv

    - | 
      header("Analyze Failures")
      jq ".[] | select(.num_failures>0) | {name: .name, fail: .num_failures}" out.json > fail.json
      cat fail.json
      
    - |
      header("Analyze 80th percentile response times")
      # See https://github.com/CDLUC3/mrt-locust/blob/main/sample.md for an explanation of this jq command
      jq "[.[] | {name: .name, resp_ms_80pct: (.response_times | (. as \$s | [([(keys[] as \$k | (\$k | tonumber))] | sort_by(.)) | .[] as \$v | range(\$s[\$v|tostring]) | \$v]) as \$vals | \$vals[(\$vals | length) * .8])}]" out.json > out80.json
      cat out80.json

    - |
      header("Test for failure... fail if file is not empty")
      if [ -s fail.json ]; then fail("FAILURE found"); fi

    - |
      header("Test for login response times greater than #{MS_LOGIN}ms... fail if file is not empty")
      jq ".[] | select(.resp_ms_80pct > $MS_LOGIN) | select(.name==\"/guest_login\")" out80.json > out.test.json
      if [ -s out.test.json ]; then fail("FAIL login reposonse time"); fi

    - |
      header("Test for response times greater than ${MS_RESP}ms... fail if file is not empty")
      jq ".[] | select(.resp_ms_80pct > $MS_RESP) | select(.name!=\"/guest_login\")" out80.json > out.test.json
      if [ -s out.test.json ]; then fail("FAIL response time"); fi
